# coding: utf-8

"""
    Video Insights

    The Video Insights API endpoint

    The version of the OpenAPI document: 0.9.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr

class MediaVisualAnalyzer(BaseModel):
    """
    MediaVisualAnalyzer
    """
    has_more_pages: StrictBool = Field(...)
    in_progress: StrictBool = Field(...)
    query_response: StrictStr = Field(...)
    returned_page: StrictInt = Field(...)
    total_num_pages: StrictInt = Field(...)
    __properties = ["has_more_pages", "in_progress", "query_response", "returned_page", "total_num_pages"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> MediaVisualAnalyzer:
        """Create an instance of MediaVisualAnalyzer from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> MediaVisualAnalyzer:
        """Create an instance of MediaVisualAnalyzer from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return MediaVisualAnalyzer.parse_obj(obj)

        _obj = MediaVisualAnalyzer.parse_obj({
            "has_more_pages": obj.get("has_more_pages"),
            "in_progress": obj.get("in_progress"),
            "query_response": obj.get("query_response"),
            "returned_page": obj.get("returned_page"),
            "total_num_pages": obj.get("total_num_pages")
        })
        return _obj


