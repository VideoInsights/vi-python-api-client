# coding: utf-8

"""
    Video Insights

    The Video Insights API endpoint

    The version of the OpenAPI document: 0.9.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr

class YTQueryResponse(BaseModel):
    """
    YTQueryResponse
    """
    completed: Optional[StrictBool] = False
    language: StrictStr = Field(...)
    query: StrictStr = Field(...)
    response: StrictStr = Field(...)
    vi_tokens_used: Optional[Any] = Field(...)
    video_id: StrictStr = Field(...)
    __properties = ["completed", "language", "query", "response", "vi_tokens_used", "video_id"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> YTQueryResponse:
        """Create an instance of YTQueryResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if vi_tokens_used (nullable) is None
        # and __fields_set__ contains the field
        if self.vi_tokens_used is None and "vi_tokens_used" in self.__fields_set__:
            _dict['vi_tokens_used'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> YTQueryResponse:
        """Create an instance of YTQueryResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return YTQueryResponse.parse_obj(obj)

        _obj = YTQueryResponse.parse_obj({
            "completed": obj.get("completed") if obj.get("completed") is not None else False,
            "language": obj.get("language"),
            "query": obj.get("query"),
            "response": obj.get("response"),
            "vi_tokens_used": obj.get("vi_tokens_used"),
            "video_id": obj.get("video_id")
        })
        return _obj


