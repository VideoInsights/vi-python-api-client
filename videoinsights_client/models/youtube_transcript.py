# coding: utf-8

"""
    Video Insights

    The Video Insights API endpoint

    The version of the OpenAPI document: 0.9.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt
from videoinsights_client.models.youtube_metadata import YoutubeMetadata

class YoutubeTranscript(BaseModel):
    """
    YoutubeTranscript
    """
    has_more_pages: StrictBool = Field(...)
    metadata: YoutubeMetadata = Field(...)
    returned_page: StrictInt = Field(...)
    timestamped: StrictBool = Field(...)
    transcript: Optional[Any] = Field(...)
    __properties = ["has_more_pages", "metadata", "returned_page", "timestamped", "transcript"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> YoutubeTranscript:
        """Create an instance of YoutubeTranscript from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of metadata
        if self.metadata:
            _dict['metadata'] = self.metadata.to_dict()
        # set to None if transcript (nullable) is None
        # and __fields_set__ contains the field
        if self.transcript is None and "transcript" in self.__fields_set__:
            _dict['transcript'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> YoutubeTranscript:
        """Create an instance of YoutubeTranscript from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return YoutubeTranscript.parse_obj(obj)

        _obj = YoutubeTranscript.parse_obj({
            "has_more_pages": obj.get("has_more_pages"),
            "metadata": YoutubeMetadata.from_dict(obj.get("metadata")) if obj.get("metadata") is not None else None,
            "returned_page": obj.get("returned_page"),
            "timestamped": obj.get("timestamped"),
            "transcript": obj.get("transcript")
        })
        return _obj


