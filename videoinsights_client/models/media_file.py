# coding: utf-8

"""
    Video Insights

    The Video Insights API endpoint

    The version of the OpenAPI document: 0.9.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Union
from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictInt, StrictStr

class MediaFile(BaseModel):
    """
    MediaFile
    """
    audio_parsed: StrictBool = Field(...)
    id: StrictStr = Field(...)
    md5: StrictStr = Field(...)
    name: StrictStr = Field(...)
    runtime_seconds: StrictInt = Field(...)
    size: Union[StrictFloat, StrictInt] = Field(...)
    type: StrictStr = Field(...)
    uploaded_at: StrictStr = Field(...)
    __properties = ["audio_parsed", "id", "md5", "name", "runtime_seconds", "size", "type", "uploaded_at"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> MediaFile:
        """Create an instance of MediaFile from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> MediaFile:
        """Create an instance of MediaFile from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return MediaFile.parse_obj(obj)

        _obj = MediaFile.parse_obj({
            "audio_parsed": obj.get("audio_parsed"),
            "id": obj.get("id"),
            "md5": obj.get("md5"),
            "name": obj.get("name"),
            "runtime_seconds": obj.get("runtime_seconds"),
            "size": obj.get("size"),
            "type": obj.get("type"),
            "uploaded_at": obj.get("uploaded_at")
        })
        return _obj


