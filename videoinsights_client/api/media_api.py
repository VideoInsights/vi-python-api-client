# coding: utf-8

"""
    Video Insights

    The Video Insights API endpoint

    The version of the OpenAPI document: 0.9.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError

from typing_extensions import Annotated
from pydantic import Field, StrictBool, StrictInt, StrictStr

from typing import Optional

from videoinsights_client.models.file_upload_update import FileUploadUpdate
from videoinsights_client.models.media_delete import MediaDelete
from videoinsights_client.models.media_file_list import MediaFileList
from videoinsights_client.models.media_file_upload_presigned_url import MediaFileUploadPresignedURL
from videoinsights_client.models.media_upload import MediaUpload
from videoinsights_client.models.media_visual_analyzer import MediaVisualAnalyzer
from videoinsights_client.models.media_visual_analyzer_deserializer import MediaVisualAnalyzerDeserializer

from videoinsights_client.api_client import ApiClient
from videoinsights_client.api_response import ApiResponse
from videoinsights_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class MediaApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def get_presigned_url_for_upload(self, file_name : Optional[StrictStr] = None, file_size : Optional[StrictInt] = None, **kwargs) -> MediaFileUploadPresignedURL:  # noqa: E501
        """get_presigned_url_for_upload  # noqa: E501

        Generates a presigned URL for uploading a media file.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_presigned_url_for_upload(file_name, file_size, async_req=True)
        >>> result = thread.get()

        :param file_name:
        :type file_name: str
        :param file_size:
        :type file_size: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: MediaFileUploadPresignedURL
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_presigned_url_for_upload_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_presigned_url_for_upload_with_http_info(file_name, file_size, **kwargs)  # noqa: E501

    @validate_arguments
    def get_presigned_url_for_upload_with_http_info(self, file_name : Optional[StrictStr] = None, file_size : Optional[StrictInt] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """get_presigned_url_for_upload  # noqa: E501

        Generates a presigned URL for uploading a media file.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_presigned_url_for_upload_with_http_info(file_name, file_size, async_req=True)
        >>> result = thread.get()

        :param file_name:
        :type file_name: str
        :param file_size:
        :type file_size: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(MediaFileUploadPresignedURL, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'file_name',
            'file_size'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_presigned_url_for_upload" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('file_name') is not None:  # noqa: E501
            _query_params.append(('file_name', _params['file_name']))

        if _params.get('file_size') is not None:  # noqa: E501
            _query_params.append(('file_size', _params['file_size']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['VideoInsightsAuthentication']  # noqa: E501

        _response_types_map = {
            '200': "MediaFileUploadPresignedURL",
            '400': "GenericError",
            '401': "GenericError",
        }

        return self.api_client.call_api(
            '/api/media/file/upload/get_presigned_url', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def media_delete(self, file_id : StrictStr, **kwargs) -> MediaDelete:  # noqa: E501
        """media_delete  # noqa: E501

        Deletes a file  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.media_delete(file_id, async_req=True)
        >>> result = thread.get()

        :param file_id: (required)
        :type file_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: MediaDelete
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the media_delete_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.media_delete_with_http_info(file_id, **kwargs)  # noqa: E501

    @validate_arguments
    def media_delete_with_http_info(self, file_id : StrictStr, **kwargs) -> ApiResponse:  # noqa: E501
        """media_delete  # noqa: E501

        Deletes a file  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.media_delete_with_http_info(file_id, async_req=True)
        >>> result = thread.get()

        :param file_id: (required)
        :type file_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(MediaDelete, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'file_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method media_delete" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['file_id'] is not None:
            _path_params['file_id'] = _params['file_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['VideoInsightsAuthentication']  # noqa: E501

        _response_types_map = {
            '200': "MediaDelete",
            '401': "GenericError",
            '500': "GenericError",
        }

        return self.api_client.call_api(
            '/api/media/file/{file_id}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def media_file_transcript(self, media_file_id : Annotated[StrictStr, Field(..., description="The video ID of the video to get transcript for")], page : Annotated[Optional[StrictInt], Field(description="The transcript page number to get. Defaults to 0 and increments by 1 for long transcripts")] = None, timestamped : Annotated[Optional[StrictBool], Field(description="Whether or not the transcript should include the timestamp values. Defaults to false")] = None, **kwargs) -> MediaFileList:  # noqa: E501
        """media_file_transcript  # noqa: E501

        Gets the transcript for a media file uploaded on the VideoInsights Platform.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.media_file_transcript(media_file_id, page, timestamped, async_req=True)
        >>> result = thread.get()

        :param media_file_id: The video ID of the video to get transcript for (required)
        :type media_file_id: str
        :param page: The transcript page number to get. Defaults to 0 and increments by 1 for long transcripts
        :type page: int
        :param timestamped: Whether or not the transcript should include the timestamp values. Defaults to false
        :type timestamped: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: MediaFileList
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the media_file_transcript_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.media_file_transcript_with_http_info(media_file_id, page, timestamped, **kwargs)  # noqa: E501

    @validate_arguments
    def media_file_transcript_with_http_info(self, media_file_id : Annotated[StrictStr, Field(..., description="The video ID of the video to get transcript for")], page : Annotated[Optional[StrictInt], Field(description="The transcript page number to get. Defaults to 0 and increments by 1 for long transcripts")] = None, timestamped : Annotated[Optional[StrictBool], Field(description="Whether or not the transcript should include the timestamp values. Defaults to false")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """media_file_transcript  # noqa: E501

        Gets the transcript for a media file uploaded on the VideoInsights Platform.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.media_file_transcript_with_http_info(media_file_id, page, timestamped, async_req=True)
        >>> result = thread.get()

        :param media_file_id: The video ID of the video to get transcript for (required)
        :type media_file_id: str
        :param page: The transcript page number to get. Defaults to 0 and increments by 1 for long transcripts
        :type page: int
        :param timestamped: Whether or not the transcript should include the timestamp values. Defaults to false
        :type timestamped: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(MediaFileList, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'media_file_id',
            'page',
            'timestamped'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method media_file_transcript" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('media_file_id') is not None:  # noqa: E501
            _query_params.append(('media_file_id', _params['media_file_id']))

        if _params.get('page') is not None:  # noqa: E501
            _query_params.append(('page', _params['page']))

        if _params.get('timestamped') is not None:  # noqa: E501
            _query_params.append(('timestamped', _params['timestamped']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['VideoInsightsAuthentication']  # noqa: E501

        _response_types_map = {
            '200': "MediaFileList",
            '400': "GenericError",
            '401': "GenericError",
        }

        return self.api_client.call_api(
            '/api/media/file/transcript', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def media_file_visual_analysis(self, media_visual_analyzer_deserializer : MediaVisualAnalyzerDeserializer, **kwargs) -> MediaVisualAnalyzer:  # noqa: E501
        """media_file_visual_analysis  # noqa: E501

        Executes a visual analysis of the media file given a query about it.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.media_file_visual_analysis(media_visual_analyzer_deserializer, async_req=True)
        >>> result = thread.get()

        :param media_visual_analyzer_deserializer: (required)
        :type media_visual_analyzer_deserializer: MediaVisualAnalyzerDeserializer
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: MediaVisualAnalyzer
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the media_file_visual_analysis_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.media_file_visual_analysis_with_http_info(media_visual_analyzer_deserializer, **kwargs)  # noqa: E501

    @validate_arguments
    def media_file_visual_analysis_with_http_info(self, media_visual_analyzer_deserializer : MediaVisualAnalyzerDeserializer, **kwargs) -> ApiResponse:  # noqa: E501
        """media_file_visual_analysis  # noqa: E501

        Executes a visual analysis of the media file given a query about it.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.media_file_visual_analysis_with_http_info(media_visual_analyzer_deserializer, async_req=True)
        >>> result = thread.get()

        :param media_visual_analyzer_deserializer: (required)
        :type media_visual_analyzer_deserializer: MediaVisualAnalyzerDeserializer
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(MediaVisualAnalyzer, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'media_visual_analyzer_deserializer'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method media_file_visual_analysis" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['media_visual_analyzer_deserializer'] is not None:
            _body_params = _params['media_visual_analyzer_deserializer']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['VideoInsightsAuthentication']  # noqa: E501

        _response_types_map = {
            '200': "MediaVisualAnalyzer",
            '400': "GenericError",
            '401': "GenericError",
        }

        return self.api_client.call_api(
            '/api/media/file/visual_analysis', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def media_list(self, page : Annotated[Optional[StrictInt], Field(description="The media file list page number to get. Defaults to 0 and increments by 1 for longer lists")] = None, **kwargs) -> MediaFileList:  # noqa: E501
        """media_list  # noqa: E501

        Lists all files  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.media_list(page, async_req=True)
        >>> result = thread.get()

        :param page: The media file list page number to get. Defaults to 0 and increments by 1 for longer lists
        :type page: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: MediaFileList
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the media_list_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.media_list_with_http_info(page, **kwargs)  # noqa: E501

    @validate_arguments
    def media_list_with_http_info(self, page : Annotated[Optional[StrictInt], Field(description="The media file list page number to get. Defaults to 0 and increments by 1 for longer lists")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """media_list  # noqa: E501

        Lists all files  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.media_list_with_http_info(page, async_req=True)
        >>> result = thread.get()

        :param page: The media file list page number to get. Defaults to 0 and increments by 1 for longer lists
        :type page: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(MediaFileList, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'page'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method media_list" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('page') is not None:  # noqa: E501
            _query_params.append(('page', _params['page']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['VideoInsightsAuthentication']  # noqa: E501

        _response_types_map = {
            '200': "MediaFileList",
            '401': "GenericError",
        }

        return self.api_client.call_api(
            '/api/media/file/list', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def media_upload_update(self, file_upload_update : FileUploadUpdate, **kwargs) -> MediaUpload:  # noqa: E501
        """media_upload_update  # noqa: E501

        Updates the upload of a uuid  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.media_upload_update(file_upload_update, async_req=True)
        >>> result = thread.get()

        :param file_upload_update: (required)
        :type file_upload_update: FileUploadUpdate
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: MediaUpload
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the media_upload_update_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.media_upload_update_with_http_info(file_upload_update, **kwargs)  # noqa: E501

    @validate_arguments
    def media_upload_update_with_http_info(self, file_upload_update : FileUploadUpdate, **kwargs) -> ApiResponse:  # noqa: E501
        """media_upload_update  # noqa: E501

        Updates the upload of a uuid  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.media_upload_update_with_http_info(file_upload_update, async_req=True)
        >>> result = thread.get()

        :param file_upload_update: (required)
        :type file_upload_update: FileUploadUpdate
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(MediaUpload, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'file_upload_update'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method media_upload_update" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['file_upload_update'] is not None:
            _body_params = _params['file_upload_update']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['VideoInsightsAuthentication']  # noqa: E501

        _response_types_map = {
            '200': "MediaUpload",
            '400': "GenericError",
            '401': "GenericError",
        }

        return self.api_client.call_api(
            '/api/media/file/upload/update', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
