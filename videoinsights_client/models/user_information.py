# coding: utf-8

"""
    Video Insights

    The Video Insights API endpoint

    The version of the OpenAPI document: 0.9.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime

from pydantic import BaseModel, Field, StrictInt, StrictStr

class UserInformation(BaseModel):
    """
    UserInformation
    """
    current_plan: StrictStr = Field(...)
    email: StrictStr = Field(...)
    joined: datetime = Field(...)
    token_reset_date: StrictStr = Field(...)
    token_reset_timestamp: StrictInt = Field(...)
    vi_tokens_unused: StrictInt = Field(...)
    vi_tokens_used: StrictInt = Field(...)
    __properties = ["current_plan", "email", "joined", "token_reset_date", "token_reset_timestamp", "vi_tokens_unused", "vi_tokens_used"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> UserInformation:
        """Create an instance of UserInformation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> UserInformation:
        """Create an instance of UserInformation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return UserInformation.parse_obj(obj)

        _obj = UserInformation.parse_obj({
            "current_plan": obj.get("current_plan"),
            "email": obj.get("email"),
            "joined": obj.get("joined"),
            "token_reset_date": obj.get("token_reset_date"),
            "token_reset_timestamp": obj.get("token_reset_timestamp"),
            "vi_tokens_unused": obj.get("vi_tokens_unused"),
            "vi_tokens_used": obj.get("vi_tokens_used")
        })
        return _obj


