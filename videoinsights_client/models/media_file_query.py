# coding: utf-8

"""
    Video Insights

    The Video Insights API endpoint

    The version of the OpenAPI document: 0.9.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr

class MediaFileQuery(BaseModel):
    """
    MediaFileQuery
    """
    media_id: StrictStr = Field(default=..., description="The media id of the video")
    query: StrictStr = Field(default=..., description="The question about the video")
    visual_query: Optional[StrictBool] = Field(default=False, description="If true, the query is a visual analysis, incurring more cost")
    __properties = ["media_id", "query", "visual_query"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> MediaFileQuery:
        """Create an instance of MediaFileQuery from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if visual_query (nullable) is None
        # and __fields_set__ contains the field
        if self.visual_query is None and "visual_query" in self.__fields_set__:
            _dict['visual_query'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> MediaFileQuery:
        """Create an instance of MediaFileQuery from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return MediaFileQuery.parse_obj(obj)

        _obj = MediaFileQuery.parse_obj({
            "media_id": obj.get("media_id"),
            "query": obj.get("query"),
            "visual_query": obj.get("visual_query") if obj.get("visual_query") is not None else False
        })
        return _obj


